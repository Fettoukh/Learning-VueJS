--- v-bind --- 
 - Dynamically binds an attribute to an expression ( a variable )
 - v-bind:attribute="expression or variable" equivalent to :attribute="expression

--- v-if ---
 - helps with condition rendering
 - it removes the element not shown from the dom

--- v-show --- 
 - shows or hide an element with a condition
 - it keeps the element in the dom with "display-none" style 

--- v-for ---
 - loop over an array in order to create a list of the element of the array

 --- v-on event binding---
  - listen to the events we specify
  - v-on:event="function or expression" equivalent @event="function or expression"

--- style binding ---
<p :style="{"font-size" : fontSize}"/>
data : {
    color : "red",
    fontSize : "13px"
}

<p :style="styleObject"/>
data : {
    styleObject : {
        color : "red",
        fontSize : "13px"
    }   
}

<p :style="[styleObject1 , styleObject2]"/>
data : {
    styleObject1 : {
        color : "red",
        fontSize : "13px"
    } 
    styleObject2 : {
        color : "red",
        fontSize : "13px"
    }   
}


--- Computed ---
 - the results is cashed until the dependencies is changed

 --- Components ---
  - vue.component("name of the component" , {
      props : [message] or
      props : {
          message : {
              type:String,
              required : true,
              default : "Hi"
          }
      }
      template : ` <div>{{message}}</div>`,
      data() { // it s a function and not an object like (new vue) so each component will have its own unique data
          return {

          }
      }
  })


  ---v-model---
  double bind an input to a variable whenever the user types something it is the variable is automaticly updated (on change + value React)